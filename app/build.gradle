apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.18.0'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def overheadPath
def extraGradle
Properties tcLocalProps = new Properties()

File tcLocalPropsFile = project.rootProject.file('tc_local.properties')
if (tcLocalPropsFile.exists()) {
    logger.quiet('Found ' + tcLocalPropsFile)
    tcLocalProps.load(tcLocalPropsFile.newDataInputStream())
    overheadPath = tcLocalProps.getProperty("overheadpath")
    extraGradle = tcLocalProps.getProperty("extragradle")
} else {
    logger.error('tc_local.properties not found')
}

if (overheadPath == null) {
    overheadPath = System.getenv("overheadpath")
}
if (extraGradle == null) {
    extraGradle = System.getenv("extragradle")
}


if (overheadPath != null) {
    logger.quiet('Found ' + ":" + overheadPath)
    project.ext.set("overheadPath", overheadPath)

    if (extraGradle != null) {
        File extraGradleFile = new File(overheadPath, extraGradle)
        if (extraGradleFile.exists()) {
            logger.quiet('Found ' + extraGradleFile)
            apply from: extraGradleFile
        } else {
            logger.error(extraGradleFile + " not found")
        }
    }
} else {
    logger.error('overheadpath not found')
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists() && ext.crashlyticsApiKey != null && ext.crashlyticsApiSecret) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: ext.crashlyticsApiSecret)
            entry(key: "apiKey", value: ext.crashlyticsApiKey)
        }
    }
}


android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    defaultConfig {
        applicationId "de.thecode.android.tazreader"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 51
        versionName "3.0." + versionCode
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            debuggable true
            versionNameSuffix "_debug"
        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        releaseAlpha.initWith(buildTypes.release)
        releaseAlpha {
            versionNameSuffix "_alpha"
        }

        releaseBeta.initWith(buildTypes.release)
        releaseBeta {
            versionNameSuffix "_beta"
        }

    }

    // If you want the right .apk to be served, there is only one rule to follow here:
    // x86 version number > ARMv7 version number > ARMv5 version number
    // http://ph0b.com/improving-x86-support-of-android-apps-libs-engines/#ArchDependentAPKs
    productFlavors {
        x86 {
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
            versionName defaultConfig.versionName + "_x86"

            ndk {
                abiFilter "x86"
            }
        }
        mips {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            versionName defaultConfig.versionName + "_mips"
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
            versionName defaultConfig.versionName + "_armv7"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
            versionName defaultConfig.versionName + "_arm"
            ndk {
                abiFilter "armeabi"
            }
        }
//        fat {
//            versionName defaultConfig.versionName + "fat"
//        }
    }

    //instead of "app-release.apk" this method will rewrite the name to
    // "...-v<defaultConfig.versionName>-RELEASE.apk which is much better suited for archiving and overall handling
    // To restore the default behavior just delete the whole block below
    applicationVariants.all { variant ->
        variant.outputs.each { output ->

            Boolean keepapkname = Boolean.parseBoolean(System.getenv("keepapkname"))
            logger.quiet("keepapkname:" + keepapkname)

            if (!keepapkname) {

                def newName;
                def outputDir;


                if (overheadPath != null) {
                    outputDir = new File(overheadPath, "build");
                    outputDir.mkdir();
                } else {
                    outputDir = output.outputFile.parentFile
                }

                newName = output.outputFile.name.replace(".apk", "-v" + defaultConfig.versionName + "-" + variant.buildType.name.toUpperCase() + ".apk");

                newName = newName
                        .replace("-" + variant.buildType.name, "")
                        .replace(project.name, "taz.app");

                output.outputFile = new File(outputDir, newName);
                if (!output.zipAlign) {
                    logger.quiet("output is unaligned");
                    output.outputFile = new File(outputDir, newName.replace("-unaligned", ""));
                }

                logger.quiet('INFO: Set outputFile to ' + output.outputFile + " for [" + variant.name + "]");
            }
        }
    }
}


repositories {
    maven { url "https://repo.commonsware.com.s3.amazonaws.com" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile 'com.mcxiaoke.volley:library:1.0.9'
    compile 'com.googlecode.plist:dd-plist:1.8'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.google.guava:guava:18.0'
    compile 'com.commonsware.cwac:provider:0.2.3'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.melnykov:floatingactionbutton:1.2.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }
    debugCompile 'com.facebook.stetho:stetho:1.0.0'
    compile 'fr.avianey.com.viewpagerindicator:library:2.4.1@aar'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    releaseAlphaCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    releaseBetaCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    compile 'org.apache.commons:commons-lang3:3.4'
}
